name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-mock flake8 black isort mypy

    - name: Lint with flake8
      continue-on-error: true
      run: |
        python -m flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics || true
        python -m flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics || true

    - name: Format check with black
      continue-on-error: true
      run: |
        python -m black --check src tests || echo "Black formatting issues found"

    - name: Import sorting check with isort
      continue-on-error: true
      run: |
        python -m isort --check-only src tests || echo "Import sorting issues found"

    - name: Type check with mypy
      continue-on-error: true
      run: |
        python -m mypy src || echo "Type check issues found"

    - name: Run tests with pytest
      run: |
        python -m pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=pytest.xml \
          -v

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest.xml
          coverage.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install safety bandit[toml] || echo "Security tools installation completed with warnings"

    - name: Security audit with safety
      continue-on-error: true
      run: |
        python -m safety check || echo "Security check completed with warnings"

    - name: Security scan with bandit
      continue-on-error: true
      run: |
        python -m bandit -r src || echo "Security scan completed with warnings"

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  basic-integration:
    name: Basic Integration Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test CLI installation
      run: |
        python -c "import sys; sys.path.insert(0, 'src'); import improved_sdd_cli; print('Import successful')"

    - name: Test CLI help command
      run: |
        python src/improved_sdd_cli.py --help

    - name: Test CLI check command (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "y" | python src/improved_sdd_cli.py check || echo "Check command completed"

    - name: Test CLI check command (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Use PowerShell here-string to provide input
        $input = "y"
        $input | python src/improved_sdd_cli.py check
        if ($LASTEXITCODE -ne 0) { Write-Host "Check command completed" }
